{"version":3,"sources":["components/nav.js","pages/home/index.js","pages/fontPairing/index.js","pages/about/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","projectTitle","children","map","o","i","key","PairFont","to","path","HomePage","useRouteMatch","useReducer","s","a","first","second","exact","PairPage","AboutPage","App","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAiBeA,EAfH,SAACC,GACT,OACA,4BAAQC,UAAU,6BACjB,6BACC,4BAAKD,EAAME,eAEZ,6BACC,wBAAID,UAAU,sCACHD,EAAMG,SAASC,KAAI,SAACC,EAAEC,GAAH,OAAQ,wBAAIC,IAAKD,GAAID,U,8OCEzD,IA8BMG,EAAW,SAACR,GACjB,OACC,iCACC,6BACC,sEACA,uBAAGC,UAAU,aAAb,kcAID,6BACC,yBAAKA,UAAU,IACd,yBAAKA,UAAU,KACf,kBAAC,IAAD,CAAMA,UAAU,GAAGQ,GAAE,UAAKT,EAAMU,KAAX,OAArB,cAOUC,EAjDE,WAAO,IAClBD,EAAQE,cAARF,KADiB,EAKAG,sBACrB,SAACC,EAAEC,GAAH,O,yVAAA,IAAcD,EAAd,GAAmBC,KACnB,CAACC,MAAM,QAAQC,OAAO,UAPD,6BAUtB,OACC,6BAAShB,UAAU,+BAClB,yBAAKA,UAAU,aACd,+DACA,iEACA,uBAAGA,UAAU,aAAb,kcAED,yBAAKA,UAAU,aACd,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOiB,OAAK,EAACR,KAAMA,GAClB,kBAAC,EAAD,CAAUA,KAAMA,SCnBPS,EAXE,WAChB,OACC,6BAASlB,UAAU,+BAClB,yBAAKA,UAAU,QAAO,oEAEtB,yBAAKA,UAAU,gBCMHmB,EAXG,WACjB,OACC,6BAASnB,UAAU,+BAClB,yBAAKA,UAAU,QAAO,iEAEtB,yBAAKA,UAAU,gBCqCHoB,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAKnB,aAAa,iBACd,kBAAC,IAAD,CAAMO,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,oBACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,kBAEJ,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,OAAK,EAACR,KAAK,IAAIY,UAAWX,IACjC,kBAAC,IAAD,CAAOD,KAAK,aAAaY,UAAWH,IACpC,kBAAC,IAAD,CAAOT,KAAK,SAASY,UAAWF,QCzBtBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.74d9f055.chunk.js","sourcesContent":["import React from 'react';\n\nconst Nav = (props) => {\n    return (\n    <header className=\"nav flex-xs-parent p-xs-s\">\n    \t<div>\n    \t\t<h5>{props.projectTitle}</h5>\n    \t</div>\n    \t<nav>\n    \t\t<ul className=\"flex-xs-parent flex-xs-justify-end\">\n                {props.children.map((o,i)=>(<li key={i}>{o}</li>))}\n    \t\t</ul>\n    \t</nav>\n    </header>\n    )\n}\n\nexport default Nav;","import React, {useReducer} from 'react';\n\nimport {\n\tSwitch,\n\tRoute,\n\tLink,\n\tuseRouteMatch\n} from 'react-router-dom';\n//Haven't started styling the app. Just setting up the routing. Have applied some easy classes that I had in my library to make it easy to look at.\n//https://mannenpag.github.io/sass-library/\n\n//Here is home content. \nconst HomePage = () => {\n\tlet {path} = useRouteMatch();\n\n\t// A reducer is a handy way of creating app data that is subscribed but somewhat custom\n\t// These will reset if you ever navigate away from the Learn pages\n\tlet [fonts,setFont] = useReducer(\n\t\t(s,a) => ({...s,...a}),\n\t\t{first:'Arial',second:'serif'}\n\t);\n\n\treturn(\n\t\t<section className=\"container max-xs-s p-xs-txl\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<h4>Welcome to our font pairing app</h4>\n\t\t\t\t<p>This is our app for pairing fonts.</p>\n\t\t\t\t<p className=\"max-xs-xl\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n\t\t\t</div>\n\t\t\t<div className=\"container\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path={path}>\n\t\t\t\t\t\t<PairFont path={path}/>\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</section>\n\t\t);\n}\n\n//Here is the start pairing content.\n//If this is the flow we want to go for. The flow is accesable from the home screen. \nconst PairFont = (props) => {\n\treturn (\n\t\t<section>\n\t\t\t<div>\n\t\t\t\t<h3>Here is info about the pairing process</h3>\n\t\t\t\t<p className=\"max-xs-xl\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n\t\t\t</div>\n\n\n\t\t\t<div>\n\t\t\t\t<div className=\"\">\n\t\t\t\t\t<div className=\"\"/>\n\t\t\t\t\t<Link className=\"\" to={`${props.path}/1`}>Start!</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n\nexport default HomePage;","import React from 'react';\n\nconst PairPage = () => {\n\treturn (\n\t\t<section className=\"container max-xs-s p-xs-txl\">\n\t\t\t<div className=\"hero\"><h3>Here goes infor about pairing fonts</h3></div>\n\t\t\t\n\t\t\t<div className=\"container\">\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n\nexport default PairPage;\n","import React from 'react';\n\nconst AboutPage = () => {\n\treturn (\n\t\t<section className=\"container max-xs-s p-xs-txl\">\n\t\t\t<div className=\"hero\"><h3>Here goes info about the project</h3></div>\n\t\t\t\n\t\t\t<div className=\"container\">\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n\nexport default AboutPage;\n","//Hello!\n//Suggested workfolw. Open a new terminal tab for node running react, sass compile and watch for style folder, and git for alpha folder. \n\nimport React from 'react';\nimport './styles/App.css';\nimport './styles/style.min.css';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n\n//Here goes the components that we're importing to the main app.\n//The main components are the ones that will be displayed at all times. \n//Etc. the nav, the footer. The components that will be in the blocks that make up the pages can be imported directlly into the pages and then the pages into the main app.\nimport Nav from \"./components/nav\";\n\n//Here goes the pages that we're importing to the main app.\n//The pages are the contet that will be exchanged in the app.\nimport HomePage from \"./pages/home\";\nimport PairPage from \"./pages/fontPairing\";\nimport AboutPage from \"./pages/about\";\n\nfunction App() {\n  return (\n    <Router>\n      <Nav projectTitle=\"Pairing fonts\">\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/pairfonts\">How to pairfonts</Link>\n          <Link to=\"/about\">About project</Link>\n      </Nav>\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage}/>\n          <Route path=\"/pairfonts\" component={PairPage}/>\n          <Route path=\"/about\" component={AboutPage}/>\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}